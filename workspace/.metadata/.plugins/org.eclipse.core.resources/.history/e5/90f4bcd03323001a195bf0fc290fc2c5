package br.com.caelum.leilao.servico.teste;

import static org.junit.Assert.assertEquals;

import java.util.List;

import org.junit.Test;

import br.com.caelum.leilao.dominio.Lance;
import br.com.caelum.leilao.dominio.Leilao;
import br.com.caelum.leilao.dominio.Usuario;
import br.com.caelum.leilao.servico.Avaliador;

public class TesteDoAvaliador {

	@Test
	public void deveEntenderLancesEmOrdemCrescente() {
		// parte 1: Montar cenarios
		Usuario joao = new Usuario("João");
		Usuario jose = new Usuario("José");
		Usuario maria = new Usuario("Maria");

		Leilao leilao = new Leilao("Playstation 5 Novo");

		leilao.propoe(new Lance(joao, 1500.0));
		leilao.propoe(new Lance(jose, 2500.0));
		leilao.propoe(new Lance(maria, 3500.0));

		// parte 2: Ação
		Avaliador leiloeiro = new Avaliador();
		leiloeiro.avalia(leilao);

		// parte 3: Validação
		double maiorEsperado = 3500.0;
		double menorEsperado = 1500.0;

		assertEquals(maiorEsperado, leiloeiro.getMaiorLance(), 0.00001);
		assertEquals(menorEsperado, leiloeiro.getMenorLance(), 0.00001);
	}
	@Test
	public void deveEntenderLancesEmOrdemDecrescente() {
		Usuario joao = new Usuario("João");
		Usuario jose = new Usuario("José");
		Usuario maria = new Usuario("Maria");
		Usuario jesus = new Usuario("Jesus");
		
		Leilao leilao = new Leilao("Playstation 5 Novo");
		
		leilao.propoe(new Lance(joao, 1500.0));
		leilao.propoe(new Lance(jose, 2500.0));
		leilao.propoe(new Lance(maria, 3500.0));
		leilao.propoe(new Lance(jesus, 4500.0));
		
		Avaliador leiloeiro = new Avaliador();
		leiloeiro.avalia(leilao);
		
		
		assertEquals(4500.0, leiloeiro.getMaiorLance(), 0.00001);
		assertEquals(1500.0, leiloeiro.getMenorLance(), 0.00001);
	}

	@Test
	public void deveEntenderLeilaoComApenasUmLance() {
		Usuario joao = new Usuario("João");
		Leilao leilao = new Leilao("Dominó novinho");

		leilao.propoe(new Lance(joao, 1000.0));

		Avaliador leiloeiro = new Avaliador();
		leiloeiro.avalia(leilao);

		assertEquals(1000.0, leiloeiro.getMaiorLance(), 0.00001);
		assertEquals(1000.0, leiloeiro.getMenorLance(), 0.00001);

	}

	@Test
	public void deveEncontrarOsTresMaioresLances() {
		Usuario joao = new Usuario("João");
		Usuario maria = new Usuario("Maria");
		Leilao leilao = new Leilao("Baralho novinho");

		leilao.propoe(new Lance(joao, 100.0));
		leilao.propoe(new Lance(maria, 200.0));
		leilao.propoe(new Lance(joao, 300.0));
		leilao.propoe(new Lance(maria, 400.0));

		Avaliador leiloeiro = new Avaliador();
		leiloeiro.avalia(leilao);

		List<Lance> maiores = leiloeiro.getTresMaiores();
		assertEquals(3, maiores.size());
		assertEquals(400.0, maiores.get(0).getValor(), 0.00001);
		assertEquals(300.0, maiores.get(1).getValor(), 0.00001);
		assertEquals(200.0, maiores.get(2).getValor(), 0.00001);

	}

	@Test
	public void deveEntenderLeilaoComLancesEmOrdemRandomica() {
		
		Usuario marcos = new Usuario("Marcos");
		Usuario anne = new Usuario("Anne");
		Usuario beatriz = new Usuario("Beatriz");
		Usuario vitoria = new Usuario("Vitoria");
		Usuario sara = new Usuario("Sara");
		Usuario lia = new Usuario("Lia");
		Usuario muza = new Usuario("Muza");
		
		Leilao leilao = new Leilao("Meu Coração");
		
		leilao.propoe(new Lance(marcos, 200));
		leilao.propoe(new Lance(anne, 450));
		leilao.propoe(new Lance(beatriz, 120));
		leilao.propoe(new Lance(vitoria, 700));
		leilao.propoe(new Lance(sara, 630));
		leilao.propoe(new Lance(muza, 900));
		leilao.propoe(new Lance(lia, 230));
		
		Avaliador leiloeiro = new Avaliador();
		leiloeiro.avalia(leilao);
		
		assertEquals(900, leiloeiro.getMaiorLance(), 0.00001);
		assertEquals(120, leiloeiro.getMenorLance(), 0.00001);
		
	}
	
}
